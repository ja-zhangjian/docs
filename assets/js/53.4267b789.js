(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{401:function(t,e,s){"use strict";s.r(e);var v=s(25),a=Object(v.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"收集三-vue面试题源码问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#收集三-vue面试题源码问题"}},[t._v("#")]),t._v(" 收集三 vue面试题源码问题")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("1、vue的响应式原理")]),t._v(" "),s("p",[t._v("vue的响应式原理是数据劫持结合发布者、订阅者的方式来实现，通过object.defineProperty来劫持各个属性的setter和getter，在数据发生变化的时候发布消息给订阅者，触发响应的监听回调")]),t._v(" "),s("ul",[s("li",[t._v("数据监听器Observer，能够对数据对象的所有属性进行监听，如有变动可拿到最新值并通知订阅者（Dep）")]),t._v(" "),s("li",[t._v("指令解析器compile，对每个元素节点的指令进行扫描和接，根据指令模板替换数据，以及绑定相应的更新函数")]),t._v(" "),s("li",[t._v("watcher，作为连接observer和compile的桥梁，能够订阅并收到每个属性变动的通知。执行指令绑定的相应回调函数，从而更新视图。")])])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("2、请详细说下你对vue生命周期的理解")]),t._v(" "),s("ul",[s("li",[t._v("beforeCreate 在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。")]),t._v(" "),s("li",[t._v("created 在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：数据观测 (data observer)，property 和方法的运算，watch/event 事件回调。然而，挂载阶段还没开始，$el property 目前尚不可用")]),t._v(" "),s("li",[t._v("beforeMount 在挂载开始之前被调用：相关的 render 函数首次被调用。该钩子在服务器端渲染期间不被调用。")]),t._v(" "),s("li",[t._v("实例被挂载后调用，这时 el 被新创建的 vm.$el 替换了。如果根实例挂载到了一个文档内的元素上，当 mounted 被调用时 vm.$el 也在文档内。注意 mounted 不会保证所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以在 mounted 内部使用 vm.$nextTick：该钩子在服务器端渲染期间不被调用。")]),t._v(" "),s("li",[t._v("beforeUpdate 数据更新时调用，发生在虚拟 DOM 打补丁之前。这里适合在更新之前访问现有的 DOM，比如手动移除已添加的事件监听器。该钩子在服务器端渲染期间不被调用，因为只有初次渲染会在服务端进行。")]),t._v(" "),s("li",[t._v("updated 由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。")])]),t._v(" "),s("p",[t._v("当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态。如果要相应状态改变，通常最好使用计算属性或 watcher 取而代之。")]),t._v(" "),s("p",[t._v("注意 updated 不会保证所有的子组件也都一起被重绘。如果你希望等到整个视图都重绘完毕，可以在 updated 里使用 vm.$nextTick：")]),t._v(" "),s("p",[t._v("该钩子在服务器端渲染期间不被调用。")]),t._v(" "),s("ul",[s("li",[t._v("activated")])]),t._v(" "),s("p",[t._v("被 keep-alive 缓存的组件激活时调用。")]),t._v(" "),s("p",[t._v("该钩子在服务器端渲染期间不被调用。")]),t._v(" "),s("ul",[s("li",[t._v("deactivated")])]),t._v(" "),s("p",[t._v("被 keep-alive 缓存的组件停用时调用。")]),t._v(" "),s("p",[t._v("该钩子在服务器端渲染期间不被调用。")]),t._v(" "),s("ul",[s("li",[t._v("beforeDestroy")])]),t._v(" "),s("p",[t._v("实例销毁之前调用。在这一步，实例仍然完全可用。")]),t._v(" "),s("p",[t._v("该钩子在服务器端渲染期间不被调用。")]),t._v(" "),s("ul",[s("li",[t._v("destroyed")])]),t._v(" "),s("p",[t._v("实例销毁后调用。该钩子被调用后，对应 Vue 实例的所有指令都被解绑，所有的事件监听器被移除，所有的子实例也都被销毁。")]),t._v(" "),s("p",[t._v("该钩子在服务器端渲染期间不被调用。")]),t._v(" "),s("ul",[s("li",[t._v("errorCaptured")])]),t._v(" "),s("p",[t._v("当捕获一个来自子孙组件的错误时被调用。此钩子会收到三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。此钩子可以返回 false 以阻止该错误继续向上传播。")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("3、vue的template是如何编译成真正的html并做到双向绑定等等特殊功能的？")]),t._v(" "),s("ol",[s("li",[t._v("首先第一步实例化一个vue项目")]),t._v(" "),s("li",[t._v("模板编译是在vue生命周期的mount阶段进行的")]),t._v(" "),s("li",[t._v("在mount阶段的时候执行了compile方法将template里面的内容转化成真正的html代码")]),t._v(" "),s("li",[t._v("parse阶段是将html转化成ast（抽象语法树），用来表示代码的数据结构，在vue中我们把它理解为嵌套的，携带标签名，属性和父子关系的js对象，以树来表现DOM结构")]),t._v(" "),s("li",[t._v("optimize会对parse生成的ast树进行静态资源优化（静态内容指的是和数据没有关系，不需要每次都刷新的内容）")]),t._v(" "),s("li",[t._v("generate函数，会将每一个ast节点创建一个内部调用的方法等待后面的调用")]),t._v(" "),s("li",[t._v("在compile过程结束之后会生成一个render字符串，接下来就是new watcher这个时候会对绑定的数据执行监听，render函数就是数据监听的回调所调用的，其结果便是重新生成vnode。当这个render函数字符串在第一次mount、或者绑定的数据更新的时候，都会被调用，生成vnoede。如果是数据的更新，那么vnode会与数据改变之前的vnode做diff，对内容做改动之后，就会更新到我们的真实DOM上")])])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("4、如何封装过滤器？")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("keys")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("filters"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("key")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Vue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("filter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" filters"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//{{test|filterOne}}")]),t._v("\n")])])])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("5、vue.js的全局运行机制")]),t._v(" "),s("ol",[s("li",[t._v("先进行初始化及挂载：init以及mount")])]),t._v(" "),s("ul",[s("li",[t._v("在new Vue()之后，vue会调用_init内部方法进行初始化，他会初始化，生命周期，事件，props，methods，data，computed与watch等")]),t._v(" "),s("li",[t._v("其中最重要的部分就是Object.defineProperty设置setter与getter函数用来实现响应式以及依赖收集")])]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("再进行模板编译：compile，编译成渲染函数render function")])]),t._v(" "),s("ul",[s("li",[t._v("vue源码中虚拟dom构建经历template编译成ast语法树=>在转换为render函数，最终返回一个vnode（vnode就是vue的虚拟dom节点）")]),t._v(" "),s("li",[t._v("compile编译可以分成parse、optimize与generate三个阶段，最终需要得到render function")])]),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[t._v("再进行响应式的依赖收集：render function=>getter、setter=>watcher，进行update=>patch的过程以及使用队列来异步更新的策略")])]),t._v(" "),s("ul",[s("li",[t._v("在init的时候通过object.defineProperty进行了绑定，它使得被设置的对象读取的时候触发getter方法，赋值的时候触发setter方法")]),t._v(" "),s("li",[t._v("在render function被渲染的时候，因为会获取所需的值所以会吃法getter函数进行依赖收集")]),t._v(" "),s("li",[t._v("依赖收集的目的是将观察者watcher对象存放到当前闭包的订阅者dep的subs中，从而生成依赖关系")]),t._v(" "),s("li",[t._v("修改对象值得时候会触发对应的setter，setter会通知之前的依赖收集得到dep中每一个watcher，告诉他们自己的值改变了，需要重渲染视图")]),t._v(" "),s("li",[t._v("这个时候watcher就开始调用update来更新视图，这中间还有patch和队列异步更新的策略")])]),t._v(" "),s("ol",{attrs:{start:"4"}},[s("li",[t._v("依赖收集的同时生成virtual Dom：render function 被转化成vnode节点")])]),t._v(" "),s("ul",[s("li",[t._v("render function阶段的时候template会被转化成vnode阶段，virtual DOM其实就是一个以js对象作为基础的树（vnode节点），其中用对象的属性来描述各个节点，实际上他就是一个对真实DOM的一种抽象，最后再通过各种操作将这个对象渲染到真实环境上")]),t._v(" "),s("li",[t._v("由于virtual DOM是以js对象为基础的，而不依赖于真实环境的，所以具有很好的跨平台的性质")])]),t._v(" "),s("ol",{attrs:{start:"5"}},[s("li",[t._v("通过diff算法后进行patch更新视图")])]),t._v(" "),s("ul",[s("li",[t._v("修改一个对象的值的时候流程是setter-watcher-updata的流程来进行修改的")]),t._v(" "),s("li",[t._v("更新视图的时候，当数据发生变化的时候，执行render function 就可以得到一个新的vnode节点")]),t._v(" "),s("li",[t._v("然后是patch阶段，他会将新的数据和旧的数据方到patch中去，求出他们的差异值，最后只针对那一部分的差异值做出修改")])])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("6、vue插件安装")]),t._v(" "),s("p",[t._v("Vue.use()")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("7、vuex的内部运行机制")]),t._v(" "),s("ul",[s("li",[t._v("安装插件")]),t._v(" "),s("li",[t._v("vue的规则提供了install方法")]),t._v(" "),s("li",[t._v("vue.mixin混淆进beforeCreate钩子之后，每一个vm的实例都会去调用vueInit方法")])])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("8、axios的内部运行机制")]),t._v(" "),s("p",[t._v("axios是一个基于promise的http请求库，可以在浏览器和nojs.js中进行")]),t._v(" "),s("ul",[s("li",[t._v("axios入口")]),t._v(" "),s("li",[t._v("axios构造函数")]),t._v(" "),s("li",[t._v("interceptors 请求拦截器")]),t._v(" "),s("li",[t._v("dispatchRequest方法")]),t._v(" "),s("li",[t._v("请求转换器 transformRequest")]),t._v(" "),s("li",[t._v("http请求适配器")]),t._v(" "),s("li",[t._v("响应转换器 transformResponse")]),t._v(" "),s("li",[t._v("interceptors响应拦截器")])])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("9、什么是virtual Dom？")]),t._v(" "),s("p",[t._v("因为浏览器的标准就把dom设计的非常复杂，当我们频繁的去做dom更新，会产生一定的性能问题")]),t._v(" "),s("p",[t._v("然而虚拟dom就是使用js对象去抽象的描述一个DOM元素，它创建的元素相对来说就会比原生的DOM要简单的多")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("10、怎么实现一个VNode")]),t._v(" "),s("p",[t._v("封装一个vnode构造函数")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("11、vue是怎么进行数据更新视图的")]),t._v(" "),s("p",[t._v("在对model进行操作的时候，会触发Dep中的watcher对象，watcher会调用对应的update来修改视图，最终是将新的vnode和老的vnode进行一个patch的过程，比对出其中的差异，然后只对其中的差异数据进行渲染到页面上。")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("12、vue的跨平台是怎么做的")]),t._v(" "),s("p",[t._v("虚拟dom本质上是一个js对象，在实际开发过程中实际上你一直对这行js对象做操作，我们只是需要在vue的适配层中添加响应的适配代码就可以实现了。")]),t._v(" "),s("p",[t._v("根据platform来区分平台，并且针对不同的平台做出相同的对外接口")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("13、diff算法(path是什么)")]),t._v(" "),s("p",[t._v("patch主要是对虚拟dom所产生的数据进行差异比较的，是vue中的一个核心功能")]),t._v(" "),s("p",[t._v("其中差异比较的核心就是diff算法")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("14、proxy代理？数据双向绑定是怎么保护data中的值得？")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("15、响应式系统的依赖收集追踪原理")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("16、mixins实现原理")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("17、谈谈你对vue的双向数据绑定原理的理解")]),t._v(" "),s("p",[t._v("vue的响应式原理是数据劫持结合发布者、订阅者的方式来实现，通过object.defineProperty来劫持各个属性的setter和getter，在数据发生变化的时候发布消息给订阅者，触发响应的监听回调")]),t._v(" "),s("ul",[s("li",[t._v("需要observe的数据对进行递归遍历，包括子属性对象的属性，都加上setter和getter。这样，给这个对象的某个值赋值，就会触发setter，那么就能监听到数据变化")]),t._v(" "),s("li",[t._v("compile解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图")]),t._v(" "),s("li",[t._v("watcher，作为连接observer和compile的桥梁，主要做的事情是：")])]),t._v(" "),s("ol",[s("li",[t._v("在自身实例化时往属性订阅器（dep里面添加自己）")]),t._v(" "),s("li",[t._v("自身必须有一个update（）方法")]),t._v(" "),s("li",[t._v("待属性变动dep.notice()通知时，能调用自身的update方法，并触发compile中绑定的回调。")])]),t._v(" "),s("p",[t._v("mvvm作为数据绑定的入口，整合了observer、compile和watcher三者，通过observer来监听自己的model数据变化，通过compile来解析编译模板指令，最终利用watcher搭起observer和compile之间的通信桥梁，达到数据变化=>视图更新；视图交互变化（input）=>数据model变更的双向绑定效果")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("18、vue.js的template编译的理解")]),t._v(" "),s("p",[t._v("简言之： 就是先转换成AST树，再得到的render函数返回vnode（vue的虚拟dom节点）")]),t._v(" "),s("p",[t._v("详情步骤：")]),t._v(" "),s("p",[t._v("首先，通过compile编译器把template编译成ast语法树（abstract syntax tree即源代码的抽象语法结构的树状表现形式），compile是createCompiler的返回值，createCompiler是用以创建编译器的。另外compile还负责合并option")]),t._v(" "),s("p",[t._v("然后，ast会经过generate（将ast语法树转化成render function字符串的过程）得到render函数，render的返回值是vnode，vnode是vue的虚拟dom节点，里面有（标签名，子节点，文本等）")])])])}),[],!1,null,null,null);e.default=a.exports}}]);